{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/SectionTitle/SectionTitle.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","style","backgroundColor","color","onClick","SectionTitle","title","children","Notification","message","App","state","сounterReviews","setState","prevState","target","totalFeedback","this","countTotalFeedback","Object","keys","reduce","acc","key","countPositiveFeedbackPercentage","Math","round","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAceA,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCWWC,EAhBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,KAAK,SAELC,KAAMF,EAAOE,KACbC,MAAO,CAAEC,gBAAiBJ,EAAOK,OACjCC,QAASR,EALX,SAOGE,EAAOE,MALHF,EAAOE,YCGLK,EAPM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACnB,gCACE,6BAAKD,IACJC,MCDUC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCgE3BC,G,kNA5DbC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,oBAAiB,SAACd,GAEhB,EAAKe,UAAS,SAACC,GAAD,sBACXhB,EAAOiB,OAAOf,KAAOc,EAAUhB,EAAOiB,OAAOf,MAAQ,O,4CAI1D,WACE,IAAMgB,EAAgBC,KAAKN,MAErBO,EAAqBC,OAAOC,KAAKJ,GAAeK,QACpD,SAACC,EAAKC,GAAN,OAAcD,EAAMN,EAAcO,KAClC,GAGMlC,EAAS4B,KAAKN,MAAdtB,KACFmC,EAAkCC,KAAKC,MAC1C,IAAMrC,EAAQ6B,GAUjB,OACE,gCACE,cAAC,EAAD,CAAcZ,MAAM,wBAApB,SACE,cAAC,EAAD,CACEX,QAVW,CACjB,CAAEK,KAAM,OAAQG,MAAO,eACvB,CAAEH,KAAM,UAAWG,MAAO,UAC1B,CAAEH,KAAM,MAAOG,MAAO,QAQhBP,gBAAiBqB,KAAKL,wBAI1B,cAAC,EAAD,CAAcN,MAAM,aAApB,SAC0B,IAAvBY,EACC,cAAC,EAAD,CAAcT,QAAQ,sBAEtB,cAAC,EAAD,CACEpB,KAAM4B,KAAKN,MAAMtB,KACjBC,QAAS2B,KAAKN,MAAMrB,QACpBC,IAAK0B,KAAKN,MAAMpB,IAChBC,MAAO0B,EACPzB,mBAAoB+B,a,GApDhBG,IAAMC,YCGTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.60fab5d4.chunk.js","sourcesContent":["// Вынеси отображение статистики в отдельный компонент\r\n//   `<Statistics good={} neutral={} bad={} total={} positivePercentage={}>`.\r\nimport React from \"react\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <p>Good: {good}</p>\r\n    <p>Neutral: {neutral}</p>\r\n    <p>Bad: {bad}</p>\r\n    <p>Total: {total}</p>\r\n    <p>Positive feedback: {positivePercentage} %</p>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","// - Вынеси блок кнопок в компонент\r\n//   `<FeedbackOptions options={} onLeaveFeedback={}>`.\r\n\r\nimport React from \"react\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div>\r\n    {options.map((option) => (\r\n      <button\r\n        type=\"button\"\r\n        key={option.name}\r\n        name={option.name}\r\n        style={{ backgroundColor: option.color }}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {option.name}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","// Создай компонент `<Section title=\"\">`, который рендерит секцию с заголовком и\r\n//   детей (children). Оберни каждый из `<Statistics>` и `<FeedbackOptions>` в\r\n//   созданный компонент секции.\r\n\r\nimport React from \"react\";\r\n\r\nconst SectionTitle = ({ title, children }) => (\r\n  <div>\r\n    <h1>{title}</h1>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default SectionTitle;\r\n","// Расширь функционал приложения так, чтобы блок статистики рендерился только после\r\n// того, как был собран хотя бы один отзыв. Сообщение об отсутствиии статистики\r\n// вынеси в компонент `<Notification message=\"No feedback given\">`.\r\n\r\nimport React from \"react\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nexport default Notification;\r\n","import React from \"react\";\n\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport SectionTitle from \"./components/SectionTitle\";\nimport Notification from \"./components/Notification\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  сounterReviews = (option) => {\n    // console.log(option.target.name);\n    this.setState((prevState) => ({\n      [option.target.name]: prevState[option.target.name] + 1,\n    }));\n  };\n\n  render() {\n    const totalFeedback = this.state;\n    // console.log(totalFeedback);\n    const countTotalFeedback = Object.keys(totalFeedback).reduce(\n      (acc, key) => acc + totalFeedback[key],\n      0\n    );\n\n    const { good } = this.state;\n    const countPositiveFeedbackPercentage = Math.round(\n      (100 * good) / countTotalFeedback\n    );\n    // console.log(countPositiveFeedbackPercentage);\n\n    const allReviews = [\n      { name: \"good\", color: \"light green\" },\n      { name: \"neutral\", color: \"yellow\" },\n      { name: \"bad\", color: \"red\" },\n    ];\n\n    return (\n      <div>\n        <SectionTitle title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={allReviews}\n            onLeaveFeedback={this.сounterReviews}\n          />\n        </SectionTitle>\n\n        <SectionTitle title=\"Statistics\">\n          {countTotalFeedback === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={countTotalFeedback}\n              positivePercentage={countPositiveFeedbackPercentage}\n            />\n          )}\n        </SectionTitle>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//  {/* <ul>\n//           <li>\n//             <button type=\"button\" onClick={this.сounterGoodReviews}>\n//               Good\n//             </button>\n//           </li>\n//           <li>\n//             <button type=\"button\" onClick={this.сounterNeutralReviews}>\n//               Neutral\n//             </button>\n//           </li>\n//           <li>\n//             <button type=\"button\" onClick={this.сounterBadReviews}>\n//               Bad\n//             </button>\n//           </li>\n//         </ul> */}\n\n// сounterGoodReviews = () => {\n//   this.setState((prevState) => {\n//     return {\n//       good: prevState.good + 1,\n//     };\n//   });\n// };\n\n// сounterNeutralReviews = () => {\n//   this.setState((prevState) => {\n//     return {\n//       neutral: prevState.neutral + 1,\n//     };\n//   });\n//   // console.log(\"Увеличить neutral\");\n// };\n\n// сounterBadReviews = () => {\n//   this.setState((prevState) => {\n//     return {\n//       bad: prevState.bad + 1,\n//     };\n//   });\n//   // console.log(\"Увеличить bad\");\n// };\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}